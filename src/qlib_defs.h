/************************************************************************************************************
* @internal
* @remark     Winbond Electronics Corporation - Confidential
* @copyright  Copyright (c) 2019 by Winbond Electronics Corporation . All rights reserved
* @endinternal
*
* @file       qlib_defs.h
* @brief      This file contains Software Definitions Macros
*
* ### project qlib
*
************************************************************************************************************/
#ifndef __QLIB_DEFS_H__
#define __QLIB_DEFS_H__

/*---------------------------------------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------------------------------------*/
/*                                             ERROR CHECKING                                              */
/*---------------------------------------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------------------------------------*/
#ifndef __QLIB_H__
#error "This internal header file should not be included directly. Please include `qlib.h' instead"
#endif
/*---------------------------------------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------------------------------------*/
/*                                            DEPENDENCY CHECK                                             */
/*---------------------------------------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------------------------------------*/
#ifndef __QLIB_PLATFORM_INCLUDED__
#error "This file should not be included directly. Use qlib.h"
#endif

/*---------------------------------------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------------------------------------*/
/*                                                 INCLUDES                                                */
/*---------------------------------------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------------------------------------*/
#ifdef __KERNEL__
#include <linux/string.h>
#include <linux/types.h>
#else
#include <stdint.h>
#include <string.h>
#endif
#ifdef _WIN32
#include <Windows.h>
#endif
#include "qlib_platform.h"

/*---------------------------------------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------------------------------------*/
/*                                        GENERIC TYPES DEFINITIONS                                        */
/*---------------------------------------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------------------------------------*/

#ifndef QLIB_CUSTOM_TYPES
/*---------------------------------------------------------------------------------------------------------*/
/* Native unsigned integer                                                                                 */
/*---------------------------------------------------------------------------------------------------------*/
typedef unsigned int UINT;

/*---------------------------------------------------------------------------------------------------------*/
/* Native signed integer                                                                                   */
/*---------------------------------------------------------------------------------------------------------*/
typedef int INT;

/*---------------------------------------------------------------------------------------------------------*/
/* unsigned 32bit integer                                                                                  */
/*---------------------------------------------------------------------------------------------------------*/
#ifdef __linux__
typedef unsigned int U32;
#else
typedef unsigned long U32;
#endif

/*---------------------------------------------------------------------------------------------------------*/
/* signed 32bit integer                                                                                    */
/*---------------------------------------------------------------------------------------------------------*/
typedef long I32;

/*---------------------------------------------------------------------------------------------------------*/
/* unsigned 64bit integer                                                                                  */
/*---------------------------------------------------------------------------------------------------------*/
typedef unsigned long long U64;

/*---------------------------------------------------------------------------------------------------------*/
/* signed 64bit integer                                                                                    */
/*---------------------------------------------------------------------------------------------------------*/
typedef long long I64;

/*---------------------------------------------------------------------------------------------------------*/
/* unsigned 16bit integer                                                                                  */
/*---------------------------------------------------------------------------------------------------------*/
typedef unsigned short U16;

/*---------------------------------------------------------------------------------------------------------*/
/* signed 16bit integer                                                                                    */
/*---------------------------------------------------------------------------------------------------------*/
typedef short I16;

/*---------------------------------------------------------------------------------------------------------*/
/* unsigned 8bit integer                                                                                   */
/*---------------------------------------------------------------------------------------------------------*/
typedef unsigned char U8;

/*---------------------------------------------------------------------------------------------------------*/
/* signed 8bit integer                                                                                     */
/*---------------------------------------------------------------------------------------------------------*/
typedef char I8;

/*---------------------------------------------------------------------------------------------------------*/
/* unsigned pointer size integer                                                                           */
/*---------------------------------------------------------------------------------------------------------*/
typedef uintptr_t UPTR;

/*---------------------------------------------------------------------------------------------------------*/
/* Boolean type                                                                                            */
/*---------------------------------------------------------------------------------------------------------*/
#ifndef _WIN32
typedef UINT BOOL;
#endif //_WIN32

#endif // QLIB_CUSTOM_TYPES

/*---------------------------------------------------------------------------------------------------------*/
/* 64bit array                                                                                             */
/*---------------------------------------------------------------------------------------------------------*/
typedef U32 _64BIT[2];

/*---------------------------------------------------------------------------------------------------------*/
/* 128bit array                                                                                            */
/*---------------------------------------------------------------------------------------------------------*/
typedef U32 _128BIT[4];

/*---------------------------------------------------------------------------------------------------------*/
/* 160bit array                                                                                            */
/*---------------------------------------------------------------------------------------------------------*/
typedef U32 _160BIT[5];

/*---------------------------------------------------------------------------------------------------------*/
/* 192bit array                                                                                            */
/*---------------------------------------------------------------------------------------------------------*/
typedef U32 _192BIT[6];

/*---------------------------------------------------------------------------------------------------------*/
/* 224bit array                                                                                            */
/*---------------------------------------------------------------------------------------------------------*/
typedef U32 _224BIT[7];

/*---------------------------------------------------------------------------------------------------------*/
/* 256bit array                                                                                            */
/*---------------------------------------------------------------------------------------------------------*/
typedef U32 _256BIT[8];

/*---------------------------------------------------------------------------------------------------------*/
/* 320bit array                                                                                            */
/*---------------------------------------------------------------------------------------------------------*/
typedef U32 _320BIT[10];

/*---------------------------------------------------------------------------------------------------------*/
/* 512bit array                                                                                            */
/*---------------------------------------------------------------------------------------------------------*/
typedef U32 _512BIT[16];

/*---------------------------------------------------------------------------------------------------------*/
/* 640bit array                                                                                            */
/*---------------------------------------------------------------------------------------------------------*/
typedef U32 _640BIT[20];

/*---------------------------------------------------------------------------------------------------------*/
/* TRUE/FALSE                                                                                              */
/*---------------------------------------------------------------------------------------------------------*/
#ifndef TRUE
#define TRUE 1
#endif

#ifndef FALSE
#define FALSE 0
#endif

/*---------------------------------------------------------------------------------------------------------*/
/* NULL                                                                                                    */
/*---------------------------------------------------------------------------------------------------------*/
#ifndef NULL
#define NULL 0
#endif

/*---------------------------------------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------------------------------------*/
/*                                      TYPE MAXIMUM / MINIMUM VALUES                                      */
/*---------------------------------------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------------------------------------*/

/*---------------------------------------------------------------------------------------------------------*/
/* U8                                                                                                      */
/*---------------------------------------------------------------------------------------------------------*/
#define MAX_U8 ((U8)0xFF)

/*---------------------------------------------------------------------------------------------------------*/
/* I8                                                                                                      */
/*---------------------------------------------------------------------------------------------------------*/
#define MAX_I8 ((I8)0x7F)
#define MIN_I8 ((I8)0x80)

/*---------------------------------------------------------------------------------------------------------*/
/* U16                                                                                                     */
/*---------------------------------------------------------------------------------------------------------*/
#define MAX_U16 ((U16)0xFFFF)

/*---------------------------------------------------------------------------------------------------------*/
/* I16                                                                                                     */
/*---------------------------------------------------------------------------------------------------------*/
#define MAX_I16 ((I16)0x7FFF)
#define MIN_I16 ((I16)0x8000)

/*---------------------------------------------------------------------------------------------------------*/
/* U32                                                                                                     */
/*---------------------------------------------------------------------------------------------------------*/
#define MAX_U32 ((U32)0xFFFFFFFFUL)

/*---------------------------------------------------------------------------------------------------------*/
/* I32                                                                                                     */
/*---------------------------------------------------------------------------------------------------------*/
#define MAX_I32 ((I32)0x7FFFFFFFUL)
#define MIN_I32 ((I32)0x80000000UL)

/*---------------------------------------------------------------------------------------------------------*/
/* U64                                                                                                     */
/*---------------------------------------------------------------------------------------------------------*/
#define MAX_U64 ((U64)0xFFFFFFFFFFFFFFFFULL)

/*---------------------------------------------------------------------------------------------------------*/
/* I64                                                                                                     */
/*---------------------------------------------------------------------------------------------------------*/
#define MAX_I64 ((I64)0x7FFFFFFFFFFFFFFFULL)
#define MIN_I64 ((I64)0x8000000000000000ULL)

/*---------------------------------------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------------------------------------*/
/*                                            MEASUREMENT UNITS                                            */
/*---------------------------------------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------------------------------------*/

/*---------------------------------------------------------------------------------------------------------*/
/* Capacity (basic unit : byte)                                                                            */
/*---------------------------------------------------------------------------------------------------------*/
#define _1B_   1UL
#define _2B_   (2 * _1B_)
#define _4B_   (2 * _2B_)
#define _8B_   (2 * _4B_)
#define _16B_  (2 * _8B_)
#define _32B_  (2 * _16B_)
#define _64B_  (2 * _32B_)
#define _128B_ (2 * _64B_)
#define _256B_ (2 * _128B_)
#define _512B_ (2 * _256B_)

#define _1KB_   (1024 * _1B_)
#define _2KB_   (2 * _1KB_)
#define _4KB_   (2 * _2KB_)
#define _8KB_   (2 * _4KB_)
#define _16KB_  (2 * _8KB_)
#define _32KB_  (2 * _16KB_)
#define _64KB_  (2 * _32KB_)
#define _128KB_ (2 * _64KB_)
#define _256KB_ (2 * _128KB_)
#define _512KB_ (2 * _256KB_)

#define _1MB_   (1024 * _1KB_)
#define _2MB_   (2 * _1MB_)
#define _4MB_   (2 * _2MB_)
#define _8MB_   (2 * _4MB_)
#define _16MB_  (2 * _8MB_)
#define _32MB_  (2 * _16MB_)
#define _64MB_  (2 * _32MB_)
#define _128MB_ (2 * _64MB_)
#define _256MB_ (2 * _128MB_)
#define _512MB_ (2 * _256MB_)

#define _1GB_   (1024 * _1MB_)
#define _2GB_   (2 * _1GB_)
#define _4GB_   (2 * _2GB_)
#define _8GB_   (2 * _4GB_)
#define _16GB_  (2 * _8GB_)
#define _32GB_  (2 * _16GB_)
#define _64GB_  (2 * _32GB_)
#define _128GB_ (2 * _64GB_)
#define _256GB_ (2 * _128GB_)
#define _512GB_ (2 * _256GB_)

/*---------------------------------------------------------------------------------------------------------*/
/* Frequency (basic unit : hertz)                                                                          */
/*---------------------------------------------------------------------------------------------------------*/
#define _1Hz_  1UL
#define _1KHz_ (1000 * _1Hz_)
#define _1MHz_ (1000 * _1KHz_)
#define _1GHz_ (1000 * _1MHz_)

/*---------------------------------------------------------------------------------------------------------*/
/* Time                                                                                                    */
/*---------------------------------------------------------------------------------------------------------*/
#define _1USEC_IN_NSEC_ 1000UL

#define _1MSEC_IN_USEC_ 1000UL
#define _1MSEC_IN_NSEC_ ((_1MSEC_IN_USEC_) * (_1USEC_IN_NSEC_))

#define _1SEC_IN_MSEC_ 1000UL
#define _1SEC_IN_USEC_ ((_1SEC_IN_MSEC_) * (_1MSEC_IN_USEC_))
#define _1SEC_IN_NSEC_ ((_1SEC_IN_MSEC_) * (_1MSEC_IN_NSEC_))

#define _1MIN_IN_SEC_  60UL
#define _1MIN_IN_MSEC_ ((_1MIN_IN_SEC_) * (_1SEC_IN_MSEC_))
#define _1MIN_IN_USEC_ ((_1MIN_IN_SEC_) * (_1SEC_IN_USEC_))
#define _1MIN_IN_NSEC_ ((_1MIN_IN_SEC_) * (_1SEC_IN_NSEC_))

#define _1HOUR_IN_MIN_  60UL
#define _1HOUR_IN_SEC_  ((_1HOUR_IN_MIN_) * (_1MIN_IN_SEC_))
#define _1HOUR_IN_MSEC_ ((_1HOUR_IN_MIN_) * (_1MIN_IN_MSEC_))
#define _1HOUR_IN_USEC_ ((_1HOUR_IN_MIN_) * (_1MIN_IN_USEC_))
#define _1HOUR_IN_NSEC_ ((_1HOUR_IN_MIN_) * (_1MIN_IN_NSEC_))

#define _1DAY_IN_HOURS_ 24UL
#define _1DAY_IN_MIN_   ((_1DAY_IN_HOURS_) * (_1HOUR_IN_MIN_))
#define _1DAY_IN_SEC_   ((_1DAY_IN_HOURS_) * (_1HOUR_IN_SEC_))
#define _1DAY_IN_MSEC_  ((_1DAY_IN_HOURS_) * (_1HOUR_IN_MSEC_))
#define _1DAY_IN_USEC_  ((_1DAY_IN_HOURS_) * (_1HOUR_IN_USEC_))
#define _1DAY_IN_NSEC_  ((_1DAY_IN_HOURS_) * (_1HOUR_IN_NSEC_))

/*---------------------------------------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------------------------------------*/
/*                                           ACCESS MACROS                                                 */
/*---------------------------------------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------------------------------------*/

/*---------------------------------------------------------------------------------------------------------*/
/* Allow to define run-time field                                                                          */
/*---------------------------------------------------------------------------------------------------------*/
#define FIELD(bit_offset, bit_size) bit_offset, bit_size

/*---------------------------------------------------------------------------------------------------------*/
/* Get field of a register / variable                                                                      */
/*---------------------------------------------------------------------------------------------------------*/
// clang-format off
#define READ_VAR_FIELD(var, field)                                                                          \
   ((sizeof(var) == 8) ? (_GET_FIELD_VAL(var, 64, _GET_FIELD_SIZE(field), _GET_FIELD_POS(field))) :         \
   ((sizeof(var) == 4) ? (_GET_FIELD_VAL(var, 32, _GET_FIELD_SIZE(field), _GET_FIELD_POS(field))) :         \
   ((sizeof(var) == 2) ? (_GET_FIELD_VAL(var, 16, _GET_FIELD_SIZE(field), _GET_FIELD_POS(field))) :         \
                         (_GET_FIELD_VAL(var,  8, _GET_FIELD_SIZE(field), _GET_FIELD_POS(field))))))
// clang-format on
/*---------------------------------------------------------------------------------------------------------*/
/* Set field of a register / variable                                                                      */
/*---------------------------------------------------------------------------------------------------------*/
// clang-format off
#define SET_VAR_FIELD(var, field, value)                                                                                \
    ((sizeof(var) == 8) ? ((var) = _SET_FIELD_VAL(var, 64, _GET_FIELD_SIZE(field), _GET_FIELD_POS(field), value)) :     \
    ((sizeof(var) == 4) ? ((var) = _SET_FIELD_VAL(var, 32, _GET_FIELD_SIZE(field), _GET_FIELD_POS(field), value)) :     \
    ((sizeof(var) == 2) ? ((var) = _SET_FIELD_VAL(var, 16, _GET_FIELD_SIZE(field), _GET_FIELD_POS(field), value)) :     \
                          ((var) = _SET_FIELD_VAL(var,  8, _GET_FIELD_SIZE(field), _GET_FIELD_POS(field), value)))))
// clang-format on
/*---------------------------------------------------------------------------------------------------------*/
/* Variable bit operation macros                                                                           */
/*---------------------------------------------------------------------------------------------------------*/
#define READ_VAR_BIT(var, nb) _GET_BIT_VAL(var, nb)

// clang-format off
#define SET_VAR_BIT(var, nb)                                                                                \
    ((sizeof(var) == 8) ? ((var) =_SET_BIT_VAL(var, 64, nb)):                                               \
    ((sizeof(var) == 4) ? ((var) =_SET_BIT_VAL(var, 32, nb)):                                               \
    ((sizeof(var) == 2) ? ((var) =_SET_BIT_VAL(var, 16, nb)):                                               \
                          ((var) =_SET_BIT_VAL(var,  8, nb)))))
// clang-format on

// clang-format off
#define CLEAR_VAR_BIT(var, nb)                                                                              \
    ((sizeof(var) == 8) ? ((var) =_CLEAR_BIT_VAL(var, 64, nb)):                                             \
    ((sizeof(var) == 4) ? ((var) =_CLEAR_BIT_VAL(var, 32, nb)):                                             \
    ((sizeof(var) == 2) ? ((var) =_CLEAR_BIT_VAL(var, 16, nb)):                                             \
                          ((var) =_CLEAR_BIT_VAL(var,  8, nb)))))
// clang-format on

#define WRITE_VAR_BIT(var, nb, val) \
    {                               \
        if (val)                    \
        {                           \
            SET_VAR_BIT(var, nb);   \
        }                           \
        else                        \
        {                           \
            CLEAR_VAR_BIT(var, nb); \
        }                           \
    }

/*---------------------------------------------------------------------------------------------------------*/
/* Field value                                                                                             */
/*---------------------------------------------------------------------------------------------------------*/
#define MAX_FIELD_VAL(field) _MASK_FIELD(_GET_FIELD_SIZE(field), 0)

/*---------------------------------------------------------------------------------------------------------*/
/* Mask field                                                                                              */
/*---------------------------------------------------------------------------------------------------------*/
#define MASK_FIELD(field) _MASK_FIELD(_GET_FIELD_SIZE(field), _GET_FIELD_POS(field))

/*---------------------------------------------------------------------------------------------------------*/
/* Low-level getters                                                                                       */
/*---------------------------------------------------------------------------------------------------------*/
#define _CASTING_FROM(size)        _CASTING_FROM2(U, size)
#define _CASTING_FROM2(type, size) type##size
#define _GET_FIELD(pos, size)      pos, size
#define _GET_FIELD_POS(pos, size)  pos
#define _GET_FIELD_SIZE(pos, size) size

/*---------------------------------------------------------------------------------------------------------*/
/* Low-level get field value                                                                               */
/*---------------------------------------------------------------------------------------------------------*/
#define _GET_FIELD_VAL(val, val_size, field_size, field_pos) \
    (((val) >> (field_pos)) & ((((_CASTING_FROM(val_size))1U) << (field_size)) - 1U))

/*---------------------------------------------------------------------------------------------------------*/
/* Low-level set field value                                                                               */
/*---------------------------------------------------------------------------------------------------------*/
// clang-format off
#define _SET_FIELD_VAL(val, val_size, field_size, field_pos, value)                                         \
   (((field_size) == 1) ?                                                                                   \
        (((value) == 1) ?                                                                                   \
            _SET_BIT_VAL(val, val_size, field_pos)                                                          \
        :                                                                                                   \
            _CLEAR_BIT_VAL(val, val_size, field_pos))                                                       \
    :                                                                                                       \
        (   _SET_MASK(  _BUILD_FIELD_VAL_SIZE(value, val_size, field_size, field_pos),                      \
                        _CLEAR_FIELD_VAL(val, val_size, field_size, field_pos)))                            \
    )
// clang-format on

/*---------------------------------------------------------------------------------------------------------*/
/* Low-level get bit value                                                                                 */
/*---------------------------------------------------------------------------------------------------------*/
#define _GET_BIT_VAL(val, bit_num) _READ_MASK((val) >> (bit_num), 1U)

/*---------------------------------------------------------------------------------------------------------*/
/* Low-level set bit value                                                                                 */
/*---------------------------------------------------------------------------------------------------------*/
#define _SET_BIT_VAL(val, val_size, bit_num) _SET_MASK(val, (((_CASTING_FROM(val_size))1U) << (bit_num)))

/*---------------------------------------------------------------------------------------------------------*/
/* Low-level clear bit value                                                                               */
/*---------------------------------------------------------------------------------------------------------*/
#define _CLEAR_BIT_VAL(val, val_size, bit_num) _CLEAR_MASK(val, ((_CASTING_FROM(val_size))1U) << (bit_num))

/*---------------------------------------------------------------------------------------------------------*/
/* Low-level field mask                                                                                    */
/*---------------------------------------------------------------------------------------------------------*/
#define _BUILD_FIELD_MASK(val_size, field_size, field_pos) \
    ((((((_CASTING_FROM(val_size))1U) << (field_size)) - ((_CASTING_FROM(val_size))1U))) << (field_pos))

/*---------------------------------------------------------------------------------------------------------*/
/* Low-level clear mask field value                                                                        */
/*---------------------------------------------------------------------------------------------------------*/
#define _CLEAR_FIELD_VAL(val, val_size, field_size, field_pos) \
    _CLEAR_MASK(val, _BUILD_FIELD_MASK(val_size, field_size, field_pos))

/*---------------------------------------------------------------------------------------------------------*/
/* Low-level build field value with size                                                                   */
/*---------------------------------------------------------------------------------------------------------*/
#define _BUILD_FIELD_VAL_SIZE(val, val_size, field_size, field_pos) \
    ((((((_CASTING_FROM(val_size))1U) << (field_size)) - ((_CASTING_FROM(val_size))1U)) & (val)) << (field_pos))

/*---------------------------------------------------------------------------------------------------------*/
/* Low-level set mask                                                                                      */
/*---------------------------------------------------------------------------------------------------------*/
#define _SET_MASK(val, bit_mask) ((val) | (bit_mask))

/*---------------------------------------------------------------------------------------------------------*/
/* Low-level read mask                                                                                     */
/*---------------------------------------------------------------------------------------------------------*/
#define _READ_MASK(val, bit_mask) ((val) & (bit_mask))

/*---------------------------------------------------------------------------------------------------------*/
/* Low-level clear mask                                                                                    */
/*---------------------------------------------------------------------------------------------------------*/
#define _CLEAR_MASK(val, bit_mask) ((val) & (~(bit_mask)))

/*---------------------------------------------------------------------------------------------------------*/
/* Low-level mask field                                                                                    */
/*---------------------------------------------------------------------------------------------------------*/
// clang-format off
#define _MASK_FIELD(field_size, field_pos)                                                                  \
    ((((field_size)+(field_pos)) <= 8)  ? (U8)(_BUILD_FIELD_MASK(8,  field_size, field_pos))    :               \
    ((((field_size)+(field_pos)) <= 16) ? (U16)(_BUILD_FIELD_MASK(16, field_size, field_pos))    :               \
    ((((field_size)+(field_pos)) <= 32) ? (U32)(_BUILD_FIELD_MASK(32, field_size, field_pos))    :               \
                                          (U64)(_BUILD_FIELD_MASK(64, field_size, field_pos)))))
// clang-format on
/*---------------------------------------------------------------------------------------------------------*/
/* Low-level build field value                                                                             */
/*---------------------------------------------------------------------------------------------------------*/
// clang-format off
#define _BUILD_FIELD_VAL(field_size, field_pos, val)                                                        \
    (((sizeof(val)) == 8)  ? (_BUILD_FIELD_VAL_SIZE(val, 8,  field_size, field_pos))    :                   \
    (((sizeof(val)) == 16) ? (_BUILD_FIELD_VAL_SIZE(val, 16, field_size, field_pos))    :                   \
    (((sizeof(val)) == 32) ? (_BUILD_FIELD_VAL_SIZE(val, 32, field_size, field_pos))    :                   \
                             (_BUILD_FIELD_VAL_SIZE(val, 64, field_size, field_pos)))))
// clang-format on

/*---------------------------------------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------------------------------------*/
/*                                           UTILITY MACROS                                                */
/*---------------------------------------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------------------------------------*/

/*---------------------------------------------------------------------------------------------------------*/
/*                                          MACRO EXPANSION                                                */
/*---------------------------------------------------------------------------------------------------------*/
#define EVAL(x) x

/*---------------------------------------------------------------------------------------------------------*/
/*                                            LOOP UNROLL                                                  */
/*---------------------------------------------------------------------------------------------------------*/
#define REPEAT_1(f, ...) EVAL(f(0, __VA_ARGS__))
#define REPEAT_2(f, ...)      \
    REPEAT_1(f, __VA_ARGS__); \
    EVAL(f(1, __VA_ARGS__))
#define REPEAT_3(f, ...)      \
    REPEAT_2(f, __VA_ARGS__); \
    EVAL(f(2, __VA_ARGS__))
#define REPEAT_4(f, ...)      \
    REPEAT_3(f, __VA_ARGS__); \
    EVAL(f(3, __VA_ARGS__))
#define REPEAT_5(f, ...)      \
    REPEAT_4(f, __VA_ARGS__); \
    EVAL(f(4, __VA_ARGS__))
#define REPEAT_6(f, ...)      \
    REPEAT_5(f, __VA_ARGS__); \
    EVAL(f(5, __VA_ARGS__))
#define REPEAT_7(f, ...)      \
    REPEAT_6(f, __VA_ARGS__); \
    EVAL(f(6, __VA_ARGS__))
#define REPEAT_8(f, ...)      \
    REPEAT_7(f, __VA_ARGS__); \
    EVAL(f(7, __VA_ARGS__))
#define REPEAT_9(f, ...)      \
    REPEAT_8(f, __VA_ARGS__); \
    EVAL(f(8, __VA_ARGS__))
#define REPEAT_10(f, ...)     \
    REPEAT_9(f, __VA_ARGS__); \
    EVAL(f(9, __VA_ARGS__))
#define REPEAT_11(f, ...)      \
    REPEAT_10(f, __VA_ARGS__); \
    EVAL(f(10, __VA_ARGS__))
#define REPEAT_12(f, ...)      \
    REPEAT_11(f, __VA_ARGS__); \
    EVAL(f(11, __VA_ARGS__))
#define REPEAT_13(f, ...)      \
    REPEAT_12(f, __VA_ARGS__); \
    EVAL(f(12, __VA_ARGS__))
#define REPEAT_14(f, ...)      \
    REPEAT_13(f, __VA_ARGS__); \
    EVAL(f(13, __VA_ARGS__))
#define REPEAT_15(f, ...)      \
    REPEAT_14(f, __VA_ARGS__); \
    EVAL(f(14, __VA_ARGS__))
#define REPEAT_16(f, ...)      \
    REPEAT_15(f, __VA_ARGS__); \
    EVAL(f(15, __VA_ARGS__))

/*---------------------------------------------------------------------------------------------------------*/
/* Copy array entry by entry without loop, available for up to 16 entries                                  */
/*---------------------------------------------------------------------------------------------------------*/
#define ARRAY_COPY_ENTRY(i, dst, src)      (dst)[i] = (src)[i]
#define ARRAY_COPY_INLINE(dst, src, count) REPEAT_##count(EVAL(ARRAY_COPY_ENTRY), (dst), (src))

/*---------------------------------------------------------------------------------------------------------*/
/* Write constant value to all array entries, entry by entry without loop, available for up to 16 entries  */
/*---------------------------------------------------------------------------------------------------------*/
#define ARRAY_SET_ENTRY(i, arr, v)      (arr)[i] = v
#define ARRAY_SET_INLINE(arr, v, count) REPEAT_##count(EVAL(ARRAY_SET_ENTRY), (arr), (v))

/*---------------------------------------------------------------------------------------------------------*/
/*                                        TRIPLE DATA STRUCTURE                                            */
/*---------------------------------------------------------------------------------------------------------*/
#define GET_FIRST_FROM_TRIPLE(first, second, third)  first
#define GET_SECOND_FROM_TRIPLE(first, second, third) second
#define GET_THIRD_FROM_TRIPLE(first, second, third)  third

/*---------------------------------------------------------------------------------------------------------*/
/* Enum generation                                                                                         */
/*                                                                                                         */
/* These macros are useful for generation of enum and enum string pairs.                                   */
/* For example:                                                                                            */
/*                                                                                                         */
/* #define MY_FRUITS(ELEMENT)       \                                                                      */
/* {                                \                                                                      */
/*      ELEMENT(apple),             \                                                                      */
/*      ELEMENT(banana),            \                                                                      */
/*      ELEMENT(pineapple),         \                                                                      */
/* }                                                                                                       */
/*                                                                                                         */
/* typedef enum MY_FRUITS(GENERATE_ENUM)  fruit_enums;                                                     */
/* const char* fruit_strings[] = MY_FRUITS(GENERATE_STRING);                                               */
/*                                                                                                         */
/*                                                                                                         */
/*---------------------------------------------------------------------------------------------------------*/
#define GENERATE_ENUM(ENUM)     ENUM
#define GENERATE_STRING(STRING) #STRING

/*---------------------------------------------------------------------------------------------------------*/
/*                                       PARAMETER RANGE VALIDATION                                        */
/*---------------------------------------------------------------------------------------------------------*/
#define ENUM_IN_RANGE(e, prefix) ((((e) > (prefix##_FIRST)) && ((e) < (prefix##_LAST))))

/*---------------------------------------------------------------------------------------------------------*/
/*                                              MAKE STRING                                                */
/*---------------------------------------------------------------------------------------------------------*/
#define _STRINGX(x) #x
#define STRINGX(x)  _STRINGX(x)

/*---------------------------------------------------------------------------------------------------------*/
/*                                           Assertion macros                                              */
/*---------------------------------------------------------------------------------------------------------*/
#ifndef CORE_ASSERT
#ifdef _WIN32
#define CORE_ASSERT() DebugBreak();
#elif defined(__MCUXPRESSO)
#define CORE_ASSERT()  \
    {                  \
        asm("BKPT 0"); \
    }
#else
#define CORE_ASSERT() \
    {                 \
        for (;;)      \
            ;         \
    }
#endif
#endif

#ifndef ASSERT
#define ASSERT(cond)
#endif

/*---------------------------------------------------------------------------------------------------------*/
/* Round (down) the number (val) with the (n) boundary. (n) must be power of 2                             */
/*---------------------------------------------------------------------------------------------------------*/
#define ROUND_DOWN(val, n) ((val) & (~((n)-1)))

/*---------------------------------------------------------------------------------------------------------*/
/* Check if address is aligned to 32 bit                                                                   */
/*---------------------------------------------------------------------------------------------------------*/
#define ADDRESS_ALIGNED32(p) (0 == ((UPTR)p & 0x4))

/*---------------------------------------------------------------------------------------------------------*/
/* Check if parameter is aligned to selected value (val should be a power of 2)                            */
/*---------------------------------------------------------------------------------------------------------*/
#define ALIGNED_TO(x, val) (((x) & (~((val)-1))) == (x))

/*---------------------------------------------------------------------------------------------------------*/
/* Bits <-> Bytes conversion                                                                               */
/*---------------------------------------------------------------------------------------------------------*/
#define BITS_TO_BYTES(bits)  ((bits) / 8)
#define BYTES_TO_BITS(bytes) ((bytes)*8)

/*---------------------------------------------------------------------------------------------------------*/
/* calculate maximum value                                                                                 */
/*---------------------------------------------------------------------------------------------------------*/
#ifndef MAX
#define MAX(a, b) ((a) > (b) ? (a) : (b))
#endif

/*---------------------------------------------------------------------------------------------------------*/
/* calculate minimum value                                                                                 */
/*---------------------------------------------------------------------------------------------------------*/
#ifndef MIN
#define MIN(a, b) ((a) < (b) ? (a) : (b))
#endif

/*---------------------------------------------------------------------------------------------------------*/
/* calculate absolute value                                                                                */
/*---------------------------------------------------------------------------------------------------------*/
#define ABS(a) ((a) > (0) ? (a) : -(a))

/*---------------------------------------------------------------------------------------------------------*/
/* calculate modulus                                                                                       */
/*---------------------------------------------------------------------------------------------------------*/
#define MOD(a, b) ((a) - (((a) / (b)) * (b)))

/*---------------------------------------------------------------------------------------------------------*/
/* Log2 of a number to return the number of bits needed to represent it                                    */
/*---------------------------------------------------------------------------------------------------------*/
#define _LOG_1(n)  (((n) >= 2) ? 1 : 0)
#define _LOG_2(n)  (((n) >= 1 << 2) ? (2 + _LOG_1((n) >> 2)) : _LOG_1(n))
#define _LOG_4(n)  (((n) >= 1 << 4) ? (4 + _LOG_2((n) >> 4)) : _LOG_2(n))
#define _LOG_8(n)  (((n) >= 1 << 8) ? (8 + _LOG_4((n) >> 8)) : _LOG_4(n))
#define _LOG_16(n) (((n) >= 1 << 16) ? (16 + _LOG_8((n) >> 16)) : _LOG_8(n))

#define LOG2(n) ((((n) & ((n)-1)) == 0) ? (_LOG_16(n)) : (_LOG_16(n) + 1))

/*---------------------------------------------------------------------------------------------------------*/
/* Calculate size of statically declared array                                                             */
/*---------------------------------------------------------------------------------------------------------*/
#ifndef ARRAY_SIZE
#define ARRAY_SIZE(a) (sizeof(a) / sizeof((a)[0]))
#endif

/*---------------------------------------------------------------------------------------------------------*/
/* Generate 64bit from bytes                                                                               */
/*---------------------------------------------------------------------------------------------------------*/
#define MAKE_64_BIT(byte0, byte1, byte2, byte3, byte4, byte5, byte6, byte7) \
    (((U64)MAKE_32_BIT(byte0, byte1, byte2, byte3)) | (((U64)MAKE_32_BIT(byte4, byte5, byte6, byte7)) << 32))

/*---------------------------------------------------------------------------------------------------------*/
/* Generate 32bit from bytes                                                                               */
/*---------------------------------------------------------------------------------------------------------*/
#define MAKE_32_BIT(byte0, byte1, byte2, byte3) \
    ((((U32)(byte0)) << 0) | (((U32)(byte1)) << 8) | (((U32)(byte2)) << 16) | (((U32)(byte3)) << 24))

/*---------------------------------------------------------------------------------------------------------*/
/* Generate 16bit from bytes                                                                               */
/*---------------------------------------------------------------------------------------------------------*/
#define MAKE_16_BIT(byte0, byte1) ((((U16)(byte0)) << 0) | (((U16)(byte1)) << 8))

/*---------------------------------------------------------------------------------------------------------*/
/* Extract bytes                                                                                           */
/*---------------------------------------------------------------------------------------------------------*/
#define BYTE(x, n) (((const U8*)&(x))[n])

/*---------------------------------------------------------------------------------------------------------*/
/* BOOLEAN                                                                                                 */
/*---------------------------------------------------------------------------------------------------------*/
#define BOOLEAN_TO_INT(b) ((TRUE == b) ? 1U : 0U)
#define INT_TO_BOOLEAN(i) ((i) ? TRUE : FALSE)

/*---------------------------------------------------------------------------------------------------------*/
/* TOUCH unused parameters                                                                                 */
/*---------------------------------------------------------------------------------------------------------*/
#define TOUCH(x) ((void)(x))

/*---------------------------------------------------------------------------------------------------------*/
/* Variable packing                                                                                        */
/*---------------------------------------------------------------------------------------------------------*/
#ifndef PACKED
#ifdef _MSC_VER
#define PACKED_START __pragma(pack(push, 1))
#define PACKED
#define PACKED_END __pragma(pack(pop))
#else
#define PACKED_START
#define PACKED __attribute__((packed))
#define PACKED_END
#endif
#endif //PACKED

/*---------------------------------------------------------------------------------------------------------*/
/* Inline functions                                                                                        */
/*---------------------------------------------------------------------------------------------------------*/
#ifndef _INLINE_
#ifdef _MSC_VER
#define _INLINE_ __forceinline
#elif defined(__GNUC__)
#define _INLINE_ inline __attribute__((__always_inline__))
#elif defined(__CLANG__)
#if __has_attribute(__always_inline__)
#define _INLINE_ inline __attribute__((__always_inline__))
#else
#define _INLINE_ inline
#endif
#else
#define _INLINE_ inline
#endif
#endif //_INLINE_

#endif // __QLIB_DEFS_H__
